state pass_on_respawn_vars
	setactorvar[RETURN].PICNUM_MEMORY PICNUM_MEMORY
	setactorvar[RETURN].HITAG_MEMORY HITAG_MEMORY
	setactorvar[RETURN].LOTAG_MEMORY LOTAG_MEMORY
	setactorvar[RETURN].XREPEAT_MEMORY XREPEAT_MEMORY
	setactorvar[RETURN].YREPEAT_MEMORY YREPEAT_MEMORY
	setactorvar[RETURN].CLIPDIST_MEMORY CLIPDIST_MEMORY
	setactorvar[RETURN].EXTRA_MEMORY EXTRA_MEMORY
	setactorvar[RETURN].CSTAT_MEMORY CSTAT_MEMORY
	setactorvar[RETURN].PAL_MEMORY PAL_MEMORY
	setactorvar[RETURN].STATNUM_MEMORY STATNUM_MEMORY
	setactorvar[RETURN].SPAWN_ORIGX SPAWN_ORIGX
	setactorvar[RETURN].SPAWN_ORIGY SPAWN_ORIGY
	setactorvar[RETURN].SPAWN_ORIGZ SPAWN_ORIGZ
	setactorvar[RETURN].SPAWN_ORIGANG SPAWN_ORIGANG
ends

state prepare_respawn_hardcoded
	ifvare COOP GM_COOPERATIVE
	{
		break // Do not respawn stuff in COOP.
	}
	else ifvarl MULTIMODE 2
	{
		break // Nor singleplayer.
	}
	
	espawn RESPAWNHANDLER
	state pass_on_respawn_vars
	setvar RETURN 0
ends

actor RESPAWNHANDLER WEAK
{
	ifcount RESPAWNPROPTIME
	{
		espawnvar PICNUM_MEMORY
		state pass_on_respawn_vars
		setactor[RETURN].picnum PICNUM_MEMORY
		setactor[RETURN].hitag HITAG_MEMORY
		setactor[RETURN].lotag LOTAG_MEMORY
		setactor[RETURN].xrepeat XREPEAT_MEMORY
		setactor[RETURN].yrepeat YREPEAT_MEMORY
		setactor[RETURN].clipdist CLIPDIST_MEMORY
		setactor[RETURN].extra EXTRA_MEMORY
		setactor[RETURN].cstat CSTAT_MEMORY
		setactor[RETURN].pal PAL_MEMORY
		setactor[RETURN].x SPAWN_ORIGX
		setactor[RETURN].y SPAWN_ORIGY
		setactor[RETURN].z SPAWN_ORIGZ
		setactor[RETURN].ang SPAWN_ORIGANG
		changespritestat RETURN STATNUM_MEMORY
		setvar RETURN 0
		
		ifvarand CSTAT_MEMORY 32768
		{
			// Do nothing
		}
		else
		{
			spawn TRANSPORTERSTAR
		}
		killit
	}
}
enda

state check_if_multiplayer_only
	ifmultiplayer
	{
		setactor[THISACTOR].pal 0
	}
	else
	{
		getactor[THISACTOR].pal TEMP
		ifvarn TEMP 0
		{
			killit
		}
	}
ends

state init_pickup
	ifaction 0
	{
		action ANULLACTION
		cstat 0
		getactor[THISACTOR].htowner TEMP
		ifvarvarn THISACTOR TEMP
		{
			getactor[THISACTOR].z SPAWN_ORIGZ
			subvar SPAWN_ORIGZ 8192
			
			setactor[THISACTOR].z SPAWN_ORIGZ
			setactor[THISACTOR].zvel -1024
		}
		
		getactor[THISACTOR].picnum TEMP
		switch TEMP
			case PLASMASPRITE:
			case RAILGUNSPRITE:
			case FLAMETHROWERSPRITE:
			case SSGSPRITE:
			case GROWSPRITEICON:
			case FLAMETHROWERAMMO:
			case PLASMAAMMO:
				state check_if_multiplayer_only
				sizeat 32 32
				break
			case RAILGUNAMMO:
				state check_if_multiplayer_only
				sizeat 16 16
				break
			case HEALTHBONER:
			case ARMORBONER:
				state check_if_multiplayer_only
				sizeat 32 28
				break
		endswitch
	}
ends

state despawn_item_from_can
	ifvare FROMCAN 0
	{
		ifspawnedby CANWITHSOMETHING setvar FROMCAN 1
		else ifspawnedby CANWITHSOMETHING2 setvar FROMCAN 1
		else ifspawnedby CANWITHSOMETHING3 setvar FROMCAN 1
		else ifspawnedby CANWITHSOMETHING4 setvar FROMCAN 1
		else ifspawnedby RUBBERCAN setvar FROMCAN 1
	}
	
	ifvare COOP GM_COOPERATIVE
	{
		break // Do not despawn stuff in COOP.
	}
	else ifvarl MULTIMODE 2
	{
		break // Nor singleplayer.
	}
	
	ifvare FROMCAN 1
	{
		ifcount RESPAWNPROPTIME
		{
			killit
		}
	}
	else ifvare FROMCAN 2
	{
		ifcount BABERESPAWNTIME
		{
			killit
		}
	}
ends

state roids_voices
	randvar RANDOM_SOUND 3
	switch RANDOM_SOUND
		case 0: sound DUKE_ROIDS01 break
		case 1: sound DUKE_ROIDS02 break
		case 2: sound DUKE_ROIDS03 break
		case 3: sound DUKE_ROIDS04 break
	endswitch
ends

state jib_sounds
	getactor[LASTHITBY].picnum TEMP
	getactor[LASTHITBY].extra TEMP2
	ifvare TEMP APLAYER
	ifvarg TEMP2 0
	ifvarvarn THISACTOR LASTHITBY
	{
		ifrnd SWEARFREQUENCY
		{
			ifvare KILLTYPE KILL_FREEZER
			{
				randvar RANDOM_SOUND 6
				switch RANDOM_SOUND
					case 0: actorsound LASTHITBY FREEZE01 break
					case 1: actorsound LASTHITBY FREEZE02 break
					case 2: actorsound LASTHITBY FREEZE03 break
					case 3: actorsound LASTHITBY FREEZE04 break
					case 4: actorsound LASTHITBY FREEZE05 break
					case 5: actorsound LASTHITBY FREEZE06 break
					case 6: actorsound LASTHITBY FREEZE07 break
				endswitch
			}
			else ifvare KILLTYPE KILL_FLAME
			{
				randvar RANDOM_SOUND 4
				switch RANDOM_SOUND
					case 0: actorsound LASTHITBY DUKE_FLAME01 break
					case 1: actorsound LASTHITBY DUKE_FLAME02 break
					case 2: actorsound LASTHITBY DUKE_FLAME03 break
					case 3: actorsound LASTHITBY DUKE_FLAME04 break
					case 4: actorsound LASTHITBY DUKE_FLAME05 break
				endswitch
			}
			else ifvare KILLTYPE KILL_SHRINKER
			{
				randvar RANDOM_SOUND 19
				switch RANDOM_SOUND
					case 0: actorsound LASTHITBY STOMP01 break
					case 1: actorsound LASTHITBY STOMP02 break
					case 2: actorsound LASTHITBY STOMP03 break
					case 3: actorsound LASTHITBY STOMP04 break
					case 4: actorsound LASTHITBY STOMP05 break
					case 5: actorsound LASTHITBY STOMP06 break
					case 6: actorsound LASTHITBY STOMP07 break
					case 7: actorsound LASTHITBY STOMP08 break
					case 8: actorsound LASTHITBY STOMP09 break
					case 9: actorsound LASTHITBY STOMP10 break
					case 10: actorsound LASTHITBY STOMP11 break
					case 11: actorsound LASTHITBY STOMP12 break
					case 12: actorsound LASTHITBY STOMP13 break
					case 13: actorsound LASTHITBY STOMP14 break
					case 14: actorsound LASTHITBY STOMP15 break
					case 15: actorsound LASTHITBY STOMP16 break
					case 16: actorsound LASTHITBY STOMP17 break
					case 17: actorsound LASTHITBY STOMP18 break
					case 18: actorsound LASTHITBY STOMP19 break
					case 19: actorsound LASTHITBY STOMP20 break
				endswitch
			}
			else
			{
				randvar RANDOM_SOUND 67
				switch RANDOM_SOUND
					case 0: actorsound LASTHITBY JIBBED_ACTOR1 break
					case 1: actorsound LASTHITBY JIBBED_ACTOR2 break
					case 2: actorsound LASTHITBY JIBBED_ACTOR3 break
					case 3: actorsound LASTHITBY JIBBED_ACTOR4 break
					case 4: actorsound LASTHITBY JIBBED_ACTOR5 break
					case 5: actorsound LASTHITBY JIBBED_ACTOR6 break
					case 6: actorsound LASTHITBY JIBBED_ACTOR7 break
					case 7: actorsound LASTHITBY JIBBED_ACTOR8 break
					case 8: actorsound LASTHITBY JIBBED_ACTOR9 break
					case 9: actorsound LASTHITBY JIBBED_ACTOR10 break
					case 10: actorsound LASTHITBY JIBBED_ACTOR11 break
					case 11: actorsound LASTHITBY JIBBED_ACTOR12 break
					case 12: actorsound LASTHITBY JIBBED_ACTOR13 break
					case 13: actorsound LASTHITBY JIBBED_ACTOR14 break
					case 14: actorsound LASTHITBY JIBBED_ACTOR15 break
					case 15: actorsound LASTHITBY SMACKED break
					case 16: actorsound LASTHITBY MDEVSPEECH break
					case 17: actorsound LASTHITBY NEWDUKEGIB01 break
					case 18: actorsound LASTHITBY NEWDUKEGIB02 break
					case 19: actorsound LASTHITBY NEWDUKEGIB03 break
					case 20: actorsound LASTHITBY NEWDUKEGIB04 break
					case 21: actorsound LASTHITBY NEWDUKEGIB05 break
					case 22: actorsound LASTHITBY NEWDUKEGIB06 break
					case 23: actorsound LASTHITBY NEWDUKEGIB07 break
					case 24: actorsound LASTHITBY NEWDUKEGIB08 break
					case 25: actorsound LASTHITBY NEWDUKEGIB09 break
					case 26: actorsound LASTHITBY NEWDUKEGIB10 break
					case 27: actorsound LASTHITBY NEWDUKEGIB11 break
					case 28: actorsound LASTHITBY NEWDUKEGIB12 break
					case 29: actorsound LASTHITBY NEWDUKEGIB13 break
					case 30: actorsound LASTHITBY NEWDUKEGIB14 break
					case 31: actorsound LASTHITBY NEWDUKEGIB15 break
					case 32: actorsound LASTHITBY NEWDUKEGIB16 break
					case 33: actorsound LASTHITBY NEWDUKEGIB17 break
					case 34: actorsound LASTHITBY NEWDUKEGIB18 break
					case 35: actorsound LASTHITBY NEWDUKEGIB19 break
					case 36: actorsound LASTHITBY NEWDUKEGIB20 break
					case 37: actorsound LASTHITBY NEWDUKEGIB21 break
					case 38: actorsound LASTHITBY NEWDUKEGIB22 break
					case 39: actorsound LASTHITBY NEWDUKEGIB23 break
					case 40: actorsound LASTHITBY NEWDUKEGIB24 break
					case 41: actorsound LASTHITBY NEWDUKEGIB25 break
					case 42: actorsound LASTHITBY NEWDUKEGIB26 break
					case 43: actorsound LASTHITBY NEWDUKEGIB27 break
					case 44: actorsound LASTHITBY NEWDUKEGIB28 break
					case 45: actorsound LASTHITBY NEWDUKEGIB29 break
					case 46: actorsound LASTHITBY NEWDUKEGIB30 break
					case 47: actorsound LASTHITBY NEWDUKEGIB31 break
					case 48: actorsound LASTHITBY NEWDUKEGIB32 break
					case 49: actorsound LASTHITBY NEWDUKEGIB33 break
					case 50: actorsound LASTHITBY NEWDUKEGIB34 break
					case 51: actorsound LASTHITBY NEWDUKEGIB35 break
					case 52: actorsound LASTHITBY NEWDUKEGIB36 break
					case 53: actorsound LASTHITBY NEWDUKEGIB37 break
					case 54: actorsound LASTHITBY NEWDUKEGIB38 break
					case 55: actorsound LASTHITBY NEWDUKEGIB39 break
					case 56: actorsound LASTHITBY NEWDUKEGIB40 break
					case 57: actorsound LASTHITBY NEWDUKEGIB41 break
					case 58: actorsound LASTHITBY NEWDUKEGIB42 break
					case 59: actorsound LASTHITBY NEWDUKEGIB43 break
					case 60: actorsound LASTHITBY NEWDUKEGIB44 break
					case 61: actorsound LASTHITBY NEWDUKEGIB45 break
					case 62: actorsound LASTHITBY NEWDUKEGIB46 break
					case 63: actorsound LASTHITBY NEWDUKEGIB47 break
					case 64: actorsound LASTHITBY NEWDUKEGIB48 break
					case 65: actorsound LASTHITBY NEWDUKEGIB49 break
					case 66: actorsound LASTHITBY NEWDUKEGIB50 break
					case 67: ifrnd 1 actorsound LASTHITBY NEWDUKEGIB51 break
				endswitch
			}
		}
	}
	
	setvar KILLTYPE KILL_NONE
ends

state randgetweapsnds
	randvar RANDOM_SOUND 15
	switch RANDOM_SOUND
		case 0: globalsound BONUS_SPEECH4 break
		case 1: globalsound DUKE_GETWEAPON1 break
		case 2: globalsound DUKE_GETWEAPON2 break
		case 3: globalsound DUKE_GETWEAPON3 break
		case 4: globalsound DUKE_GETWEAPON4 break
		case 5: globalsound DUKE_GETWEAPON5 break
		case 6: globalsound DUKE_GETWEAPON6 break
		case 7: globalsound DUKE_GETWEAPON7 break
		case 8: globalsound DUKE_GETWEAPON8 break
		case 9: globalsound DUKE_GETWEAPON9 break
		case 10: globalsound DUKE_GETWEAPON10 break
		case 11: globalsound DUKE_GETWEAPON11 break
		case 12: globalsound DUKE_GETWEAPON12 break
		case 13: globalsound DUKE_GETWEAPON13 break
		case 14: globalsound DUKE_GETWEAPON14 break
		case 15: globalsound DUKE_GETWEAPON15 break
	endswitch
ends

state quikweaponget_custom
  state randgetweapsnds
  palfrom 32 0 32
  killit
ends

state getcode_custom
  globalsound DUKE_GET
  palfrom 16 0 32
  ifvare RESPAWN_ITEMS 1
  {
    move RESPAWN_ACTOR_FLAG
    spawn RESPAWNMARKERRED
    cstat 32768
  }
  else
    killit
ends

state get_squisher
	findotherplayer TEMP
	getplayer[RETURN].i TEMP2
	setvarvar LASTHITBY TEMP2
ends

state randomize_colored_scrap
	randvar TEMP 256
	randvar TEMP2 -4096
	randvar TEMP3 2048
	setactor[RETURN].xvel TEMP
	setactor[RETURN].zvel TEMP2
	setactor[RETURN].ang TEMP3
	
	ifactor FLESHLIGHT
	{
		setactor[RETURN].pal 2
		setthisprojectile[RETURN].pal 2
	}
	else
	{
		setactor[RETURN].pal PAL_MEMORY
		setthisprojectile[RETURN].pal PAL_MEMORY
	}
	
	setvar RETURN 0
ends

state toss_colored_scrap
	eshoot COLORSCRAP1
	state randomize_colored_scrap
	eshoot COLORSCRAP2
	state randomize_colored_scrap
	eshoot COLORSCRAP3
	state randomize_colored_scrap
	eshoot COLORSCRAP4
	state randomize_colored_scrap
ends

state coloredprop_break
	ifaction 0
	{
		action ANULLACTION
		cstator 257
	}
	
	ifhitweapon
	ifdead
	{
		cstat 32768
		
		state toss_colored_scrap
		
		getactor[THISACTOR].picnum TEMP
		switch TEMP
			case BD_SOFIA:
				state toss_colored_scrap
				break
			case FLESHLIGHT:
				sound SQUISHED
			case VIBRATOR:
				sound VENT_BUST
				lotsofglass 5
				debris SCRAP1 2
				debris SCRAP2 2
				debris SCRAP3 2
				break
		endswitch
		
		killit
	}
ends

state handle_jumppad
	ifvare JUMPPAD_HIT 0
	{
		ifp ponground
		{
			// TEMP = X
			// TEMP2 = Y
			// TEMP3 = Sector Number
			getplayer[THISACTOR].posx TEMP
			getplayer[THISACTOR].posy TEMP2
			getplayer[THISACTOR].cursectnum TEMP3
			
			// Set TEMP to florz
			getflorzofslope TEMP3 TEMP TEMP2 TEMP
			subvar TEMP 16384 // Subtract height
			
			getplayer[THISACTOR].posz TEMP2			
			ifvarvarg TEMP2 TEMP // Touching floor?
			{
				sound JUMPPADSOUND
				setplayer[THISACTOR].on_ground 0 // No longer on the ground.
					
				getplayer[THISACTOR].posz TEMP // Kick them off the ground a little, to stop them from being "magnetized" to the ground.
				subvar TEMP 16384
				setplayer[THISACTOR].posz TEMP
					
				getplayer[THISACTOR].cursectnum TEMP
				ifvare SECTOR_JUMPZ[TEMP] 0
				{
					setvar TEMP2 -4096 // If not hitag is set, -4096 is the default velocity.
				}
				else ifvarg SECTOR_JUMPZ[TEMP] 0
				{
					setvar TEMP2 0
					subvarvar TEMP2 SECTOR_JUMPZ[TEMP]
				}
					
				setplayer[THISACTOR].poszv TEMP2 // Launch				
				setvar JUMPPAD_HIT 1 // They're in the air.
					
				// Set X/Y Velocities
				setvarvar TEMP2 SECTOR_JUMPX[TEMP]
				mulvar TEMP2 1024
				setvarvar JUMPPAD_XVEL TEMP2
					
				setvarvar TEMP2 SECTOR_JUMPY[TEMP]
				mulvar TEMP2 1024
				setvarvar JUMPPAD_YVEL TEMP2
			}
		}
		else
		{
			getplayer[THISACTOR].truefz TEMP
			getplayer[THISACTOR].posz TEMP2
			subvar TEMP 16384 // Subtract height
			ifvarvarg TEMP2 TEMP // Touching floor?
			{
				setplayer[THISACTOR].falling_counter 0 // Prevent fall damage
			}
		}
	}
ends

state handle_jumppad_movement
	ifvare JUMPPAD_HIT 1
	{
		setplayer[THISACTOR].falling_counter 0 // No falling damage on jump pads.
		
		ifvarn JUMPPAD_XVEL 0
		{
			setplayer[THISACTOR].posxv JUMPPAD_XVEL
		}
		
		ifvarn JUMPPAD_YVEL 0
		{
			setplayer[THISACTOR].posyv JUMPPAD_YVEL
		}
		
		ifp pdead
		{
			setvar JUMPPAD_HIT 0 // No longer launched by jump pad when player gets killed
			setvar JUMPPAD_XVEL 0
			setvar JUMPPAD_YVEL 0
		}
		else ifp ponground
		{
			setvar JUMPPAD_HIT 0 // No longer launched by jump pad when player hits the ground
			setvar JUMPPAD_XVEL 0
			setvar JUMPPAD_YVEL 0
		}
		else ifp pjetpack
		{
			setvar JUMPPAD_HIT 0 // If they use the jetpack, prevent them from cheating the jump pads to stop fall damage.
			setvar JUMPPAD_XVEL 0
			setvar JUMPPAD_YVEL 0
		}
		else ifinwater
		{
			setvar JUMPPAD_HIT 0 // Cancel out if landed in water.
			setvar JUMPPAD_XVEL 0
			setvar JUMPPAD_YVEL 0
		}
	}
ends

state handle_jumppad_prediction
	ifvare PREDICT_JUMPPAD_HIT 0
	{
		ifvare myonground 1
		{
			// Set TEMP to florz
			getflorzofslope mycursectnum myx myy TEMP
			subvar TEMP 16384 // Subtract height
			
			ifvarvarg myz TEMP // Touching floor?
			{
				setvar myonground 0 // No longer on the ground.	
				subvar myz 16384 // Kick them off the ground a little, to stop them from being "magnetized" to the ground.
								
				ifvare SECTOR_JUMPZ[mycursectnum] 0
				{
					setvar TEMP2 -4096 // If zvel isn't set, -4096 is the default velocity.
				}
				else ifvarg SECTOR_JUMPZ[mycursectnum] 0
				{
					setvar TEMP2 0
					subvarvar TEMP2 SECTOR_JUMPZ[mycursectnum]
				}
								
				setvarvar myzvel TEMP2 // Launch			
				setvar PREDICT_JUMPPAD_HIT 1 // They're in the air.
							
				// Set X/Y Velocities
				setvarvar TEMP2 SECTOR_JUMPX[mycursectnum]
				mulvar TEMP2 1024
				setvarvar PREDICT_JUMPPAD_XVEL TEMP2
								
				setvarvar TEMP2 SECTOR_JUMPY[mycursectnum]
				mulvar TEMP2 1024
				setvarvar PREDICT_JUMPPAD_YVEL TEMP2
			}
		}
	}
ends

state handle_jumppad_movement_prediction
	ifvare PREDICT_JUMPPAD_HIT 1
	{
		ifvarn PREDICT_JUMPPAD_XVEL 0
		{
			setvarvar myxvel PREDICT_JUMPPAD_XVEL
		}
		
		ifvarn PREDICT_JUMPPAD_YVEL 0
		{
			setvarvar myyvel PREDICT_JUMPPAD_YVEL
		}
		
		ifp pdead
		{
			setvar PREDICT_JUMPPAD_HIT 0 // No longer launched by jump pad when player gets killed
			setvar PREDICT_JUMPPAD_XVEL 0
			setvar PREDICT_JUMPPAD_YVEL 0
		}
		else ifvarg myonground 0
		{
			setvar PREDICT_JUMPPAD_HIT 0 // No longer launched by jump pad when player hits the ground
			setvar PREDICT_JUMPPAD_XVEL 0
			setvar PREDICT_JUMPPAD_YVEL 0
		}
		else ifp pjetpack
		{
			setvar PREDICT_JUMPPAD_HIT 0 // If they use the jetpack, prevent them from cheating the jump pads to stop fall damage.
			setvar PREDICT_JUMPPAD_XVEL 0
			setvar PREDICT_JUMPPAD_YVEL 0
		}
		else ifinwater
		{
			setvar PREDICT_JUMPPAD_HIT 0 // Cancel out if landed in water.
			setvar PREDICT_JUMPPAD_XVEL 0
			setvar PREDICT_JUMPPAD_YVEL 0
		}
	}
ends

state handle_lowgravity
	getplayer[THISACTOR].poszv TEMP
	ifvarg TEMP 512
	{
		setplayer[THISACTOR].poszv 512
	}
	
	getplayer[THISACTOR].jumping_counter TEMP
	ifvare TEMP 1261 
	{
		setplayer[THISACTOR].jumping_counter 902
	}
ends

state handle_lowgravity_prediction
	ifvarg myzvel 512
	{
		setvar myzvel 512
	}
	
	ifvare myjumpingcounter 1261 
	{
		setvar myjumpingcounter 902
	}
ends

state handle_sectortypes
	ifp palive
	{
		getactor[THISACTOR].sectnum TEMP
		ifvarand SECTOR_TYPES[TEMP] SECTORTYPE_LOWGRAVITY
		{
			state handle_lowgravity
		}
		
		getactor[THISACTOR].sectnum TEMP
		ifvarand SECTOR_TYPES[TEMP] SECTORTYPE_JUMPPAD
		{
			state handle_jumppad
		}
		
		getsector[THISACTOR].lotag TEMP
		ifvare TEMP 256
		{
			// TEMP = X
			// TEMP2 = Y
			// TEMP3 = Sector Number
			getactor[THISACTOR].x TEMP
			getactor[THISACTOR].y TEMP2
			updatesector TEMP TEMP2 TEMP3
			
			// Set TEMP to florz
			getflorzofslope TEMP3 TEMP TEMP2 TEMP
			subvar TEMP 512 // Subtract height
			
			getactor[THISACTOR].z TEMP2
			
			ifvarvarg TEMP2 TEMP // Touching floor?
			{
				setactor[THISACTOR].htextra 1000
				setactor[THISACTOR].htpicnum RADIUSEXPLOSION
			}
		}
	}
ends

state handle_sectortypes_prediction
	ifvarand SECTOR_TYPES[mycursectnum] SECTORTYPE_LOWGRAVITY
	{
		state handle_lowgravity_prediction
	}
	
	ifvarand SECTOR_TYPES[mycursectnum] SECTORTYPE_JUMPPAD
	{
		state handle_jumppad_prediction
	}
ends

state handle_rift
	ifp palive
	{
		ifinwater
		{
			break
		}
		
		getsector[THISACTOR].ceilingpicnum TEMP
		ifvare TEMP 3817
		{
			ifvare IN_RIFT 0
			{
				sound ENTER_RIFT
				palfrom 56 0 16 64
				setvar IN_RIFT 1
			}
			else
			{
				getplayer[THISACTOR].pals_time TEMP
				ifvarl TEMP 24
				{
					palfrom 24 0 16 64
				}
				
				state handle_lowgravity
			}
		}
		else
		{
			ifvare IN_RIFT 1
			{
				sound EXIT_RIFT
				palfrom 48 0 16 64
				setvar IN_RIFT 0
			}
		}
	}
ends

state handle_rift_prediction
	ifp palive
	{
		ifinwater
		{
			break
		}
		
		getsector[mycursectnum].ceilingpicnum TEMP
		ifvare TEMP 3817
		{
			ifvare PREDICT_IN_RIFT 0
			{
				setvar PREDICT_IN_RIFT 1
			}
			else
			{
				state handle_lowgravity_prediction
			}
		}
		else
		{
			ifvare PREDICT_IN_RIFT 1
			{
				setvar PREDICT_IN_RIFT 0
			}
		}
	}
ends

state strip_items
	getactor[THISACTOR].picnum TEMP
	switch TEMP
		case FIRSTGUNSPRITE:
		case SHOTGUNSPRITE:
		case DEVISTATORSPRITE:
		case CHAINGUNSPRITE:
		case SHRINKERSPRITE:
		case HBOMBAMMO:
		case RPGSPRITE:
		case TRIPBOMBSPRITE:
		case FREEZESPRITE:
		case PLASMASPRITE:
		case FLAMETHROWERSPRITE:
		case RAILGUNSPRITE:
		case SSGSPRITE:
		case AMMO:
		case AMMOLOTS:
		case BATTERYAMMO:
		case FREEZEAMMO:
		case SHOTGUNAMMO:
		case CRYSTALAMMO:
		case GROWAMMO:
		case RPGAMMO:
		case DEVISTATORAMMO:
		case PLASMAAMMO:
		case RAILGUNAMMO:
		case FLAMETHROWERAMMO:
		case JETPACK:
			killit
			break
		endswitch
ends

state gibsound
	randvar RANDOM_SOUND 3
	switch RANDOM_SOUND
		case 0: sound GIB_SPLAT1 break
		case 1: sound GIB_SPLAT2 break
		case 2: sound GIB_SPLAT3 break
		case 3: sound GIB_SPLAT4 break
	endswitch
ends

state spawn_random_whispysmoke
	espawn WHISPYSMOKE
	getactor[THISACTOR].x TEMP
	randvar TEMP2 256
	subvar TEMP2 128
	addvarvar TEMP TEMP2
	setactor[RETURN].x TEMP
			
	getactor[THISACTOR].y TEMP
	randvar TEMP2 256
	subvar TEMP2 128
	addvarvar TEMP TEMP2
	setactor[RETURN].y TEMP
		
	getactor[THISACTOR].z TEMP
	randvar TEMP2 8192
	subvarvar TEMP TEMP2
	setactor[RETURN].z TEMP
	setvar RETURN 0
ends

state spawn_random_fire
	// Fire Sprites
	espawn ONFIRE
			
	// Note: Change to clipdist later.
	getactor[THISACTOR].x TEMP
	randvar TEMP2 256
	subvar TEMP2 128
	addvarvar TEMP TEMP2
	setactor[RETURN].x TEMP
			
	getactor[THISACTOR].y TEMP
	randvar TEMP2 256
	subvar TEMP2 128
	addvarvar TEMP TEMP2
	setactor[RETURN].y TEMP
			
	// Note: Set this to use tilesizy*yrepeat later.
	getactor[THISACTOR].z TEMP
	randvar TEMP2 8192
	subvarvar TEMP TEMP2
	setactor[RETURN].z TEMP
			
	setvar RETURN 0
ends

state stop_player_burn
	getplayer[THISACTOR].i TEMP
	getactorvar[TEMP].BURNING_TICS TEMP
	ifvarg TEMP 0
	{
		setplayervar[THISACTOR].STOP_BURNING 1
		state spawn_random_whispysmoke
		state spawn_random_whispysmoke
		state spawn_random_whispysmoke
		state spawn_random_whispysmoke
		state spawn_random_whispysmoke
	}
ends
