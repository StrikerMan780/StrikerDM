onevent EVENT_WEAPKEY3
	setvar STATE_PARAM1 SHOTGUN_WEAPON
	setvar STATE_PARAM2 0
	state check_alt_weapons
endevent

onevent EVENT_WEAPKEY4
	setvar STATE_PARAM1 CHAINGUN_WEAPON
	setvar STATE_PARAM2 0
	state check_alt_weapons
endevent

onevent EVENT_WEAPKEY5
	setvar STATE_PARAM1 RPG_WEAPON
	setvar STATE_PARAM2 0
	state check_alt_weapons
endevent

onevent EVENT_WEAPKEY8
	setvar STATE_PARAM1 DEVISTATOR_WEAPON
	setvar STATE_PARAM2 0
	state check_alt_weapons
endevent

onevent EVENT_WEAPKEY10
	setvar STATE_PARAM1 FREEZE_WEAPON
	setvar STATE_PARAM2 0
	state check_alt_weapons
endevent

onevent EVENT_ALTWEAPON
	setvarvar STATE_PARAM1 WEAPON
	setvar STATE_PARAM2 0
	state check_alt_weapons
endevent

onevent EVENT_NEXTWEAPON
	setvarvar STATE_PARAM1 WEAPON
	setvar STATE_PARAM2 1
	state check_alt_weapons
endevent

onevent EVENT_PREVIOUSWEAPON
	setvarvar STATE_PARAM1 WEAPON
	setvar STATE_PARAM2 2
	state check_alt_weapons
endevent

onevent EVENT_CHANGEWEAPON
	state check_weapon_ownership
	
	getplayer[THISACTOR].curr_weapon TEMP
	ifvarn TEMP HANDREMOTE_WEAPON
	{
		setvarvar STATE_PARAM1 RETURN
		state print_weapon_name
	}
endevent

onevent EVENT_DOFIRE
	state player_updateweapons
	
	getplayer[THISACTOR].curr_weapon STATE_PARAM1
	state check_using_secondary
	
	ifvare STATE_PARAM1 FREEZE_WEAPON
	{
		ifvare STATE_RETURN WEAP_SECONDARY
		{
			ifinwater
			{
				setvar RETURN 1
				break
			}
			
			ifvarl FLAMETHROWER_AMMO 1
			{
				setvar RETURN 1
				break
			}
			
			subvar FLAMETHROWER_AMMO 1
			ifvarl FLAMETHROWER_AMMO 0
			{
				setvar FLAMETHROWER_AMMO 0
			}
		}
		else
		{
			ifvarl FREEZETHROWER_AMMO 1
			{
				setvar RETURN 1
				break
			}
			
			subvar FREEZETHROWER_AMMO 1
			ifvarl FREEZETHROWER_AMMO 0
			{
				setvar FREEZETHROWER_AMMO 0
			}
		}
	}
	else ifvare STATE_PARAM1 CHAINGUN_WEAPON
	{
		ifvare STATE_RETURN WEAP_SECONDARY
		{
			ifvarl PLASMARIFLE_AMMO 1
			{
				setvar RETURN 1
				break
			}
			
			subvar PLASMARIFLE_AMMO 1
			ifvarl PLASMARIFLE_AMMO 0
			{
				setvar PLASMARIFLE_AMMO 0
			}
		}
		else
		{
			ifvarl RIPPER_AMMO 1
			{
				setvar RETURN 1
				break
			}
			
			subvar RIPPER_AMMO 1
			ifvarl RIPPER_AMMO 0
			{
				setvar RIPPER_AMMO 0
			}
		}
	}
	else ifvare STATE_PARAM1 RPG_WEAPON
	{
		ifvare STATE_RETURN WEAP_SECONDARY
		{
			ifvarl RAILGUN_AMMO 1
			{
				setvar RETURN 1
				break
			}
			
			randvar RANDOM_SOUND 2
			switch RANDOM_SOUND
				case 0: sound RAILGUN_FIRE1 break
				case 1: sound RAILGUN_FIRE2 break
				case 2: sound RAILGUN_FIRE3 break
			endswitch
			
			subvar RAILGUN_AMMO 1
			ifvarl RAILGUN_AMMO 0
			{
				setvar RAILGUN_AMMO 0
			}
		}
		else
		{
			ifvarl RPG_AMMO 1
			{
				setvar RETURN 1
				break
			}
			
			subvar RPG_AMMO 1
			ifvarl RPG_AMMO 0
			{
				setvar RPG_AMMO 0
			}
		}
	}
	else ifvare STATE_PARAM1 DEVISTATOR_WEAPON
	{
		ifvare STATE_RETURN WEAP_SECONDARY
		{
			ifvarl DFG_AMMO 1
			{
				setvar RETURN 1
				break
			}
			
			subvar DFG_AMMO 1
			ifvarl DFG_AMMO 0
			{
				setvar DFG_AMMO 0
			}
		}
		else
		{
			ifvarl DEVASTATOR_AMMO 1
			{
				setvar RETURN 1
				break
			}
			
			subvar DEVASTATOR_AMMO 1
			ifvarl DEVASTATOR_AMMO 0
			{
				setvar DEVASTATOR_AMMO 0
			}
			
			getplayer[THISACTOR].hbomb_hold_delay TEMP
			ifvare TEMP 1
			{
				sound DEVASTATOR_FIRERIGHT
			}
			else
			{
				sound DEVASTATOR_FIRELEFT
			}
		}
	}
	else ifvare STATE_PARAM1 SHOTGUN_WEAPON
	{
		ifvare STATE_RETURN WEAP_SECONDARY // SSG
		{
			getplayer[THISACTOR].ammo_amount STATE_PARAM1 TEMP2
			ifvarl TEMP2 2
			{
				setvar RETURN 1
				break
			}
			
			subvar TEMP2 1
			setplayer[THISACTOR].ammo_amount STATE_PARAM1 TEMP2
		}
	}
	
	ifvarn RETURN 1
		state do_recoil
endevent

// This will need to be ported to mainline
onevent EVENT_FIREEVERYOTHER
	state player_updateweapons
	
	getplayer[THISACTOR].curr_weapon STATE_PARAM1
	
	ifvare STATE_PARAM1 DEVISTATOR_WEAPON
		subvar DEVASTATOR_AMMO 1
endevent

onevent EVENT_FIRE
	getplayer[THISACTOR].curr_weapon STATE_PARAM1
	state check_using_secondary
	
	ifvare STATE_PARAM1 FREEZE_WEAPON
	{
		ifvare STATE_RETURN 1
		{
			ifinwater
			{
				setvar RETURN 1
				break
			}
		}
	}
	else ifvare STATE_PARAM1 SHOTGUN_WEAPON
	{
		ifvare STATE_RETURN 1
		{
			getplayer[THISACTOR].ammo_amount SHOTGUN_WEAPON TEMP2
			ifvarl TEMP2 2
			{
				setvar RETURN 1
				break
			}
		}
	}
endevent

onevent EVENT_GETSHOTRANGE
	getplayer[THISACTOR].curr_weapon STATE_PARAM1
	state check_using_secondary
	
	ifvare STATE_PARAM1 PISTOL_WEAPON
	{
		ifrnd 72
		{
			setvar ANGRANGE 2
			setvar ZRANGE 2
		}
		else
		{
			setvar ANGRANGE 16
			setvar ZRANGE 128
		}
	}
	else ifvare STATE_PARAM1 RPG_WEAPON
	{
		ifvare STATE_RETURN 1
		{
			setvar ANGRANGE 1
			setvar ZRANGE 1
		}
	}
	else ifvare STATE_PARAM1 SHOTGUN_WEAPON
	{
		ifvare STATE_RETURN 1
		{
			setvar ANGRANGE 64
			setvar ZRANGE 512
		}
	}
endevent

onevent EVENT_GETAUTOAIMANGLE
	ifvare numplayers 1
	{
		getactor[THISACTOR].yvel TEMP
		ifvarn TEMP 0
		{
			setvar AUTOAIMANGLE 0
			break
		}
	}
	
	getplayer[THISACTOR].curr_weapon STATE_PARAM1
	state check_using_secondary
	
	ifvare STATE_PARAM1 RPG_WEAPON
	{
		ifvare STATE_RETURN 1 // Railgun
		{
			setvar AUTOAIMANGLE 12
		}
	}
endevent

onevent EVENT_DISPLAYWEAPON // P_DisplayWeapon !UNSYNCHRONIZED!
	setvar RETURN -1
	
	getplayer[THISACTOR].weapon_pos weapon_pos
	getplayer[THISACTOR].weapon_sway weapon_sway
	getuserdef[THISACTOR].weaponscale weaponscale
	getplayer[THISACTOR].i playerid
	
	// WEAPON SWAY
	setvar gun_pos 72
	setvarvar hud_temp weapon_pos
	mulvarvar hud_temp weapon_pos
	subvarvar gun_pos hud_temp
	
	sin hud_temp weapon_sway
	shiftvarr hud_temp 11
	subvarvar gun_pos hud_temp
	
	getplayer[THISACTOR].hard_landing hud_temp
	shiftvarl hud_temp 3
	subvarvar gun_pos hud_temp
	
	// Jumping bob
	getplayer[THISACTOR].jumping_counter hud_temp
	sin hud_temp2 hud_temp
	shiftvarr hud_temp2 11
	ifvarl hud_temp2 -1 // Clamp
		setvar hud_temp2 -1
	subvarvar gun_pos hud_temp2

/*	// Velocity drift
	getplayer[THISACTOR].poszv hud_temp
	shiftvarr hud_temp 8
	ifp pjumping
	{
		ifvarl hud_temp 0
			setvar hud_temp 0
	}
	addvarvar gun_pos hud_temp
*/
	
	// View pitch shift
	getplayer[THISACTOR].horiz hud_temp
		
	shiftvarr hud_temp 5
	subvarvar gun_pos hud_temp
	
	ifvarg gun_pos 80 // Clamp Y of weapon to prevent viewing past sprite bottom
		setvar gun_pos 80
	// END WEAPON SWAY

    getuserdef[THISACTOR].drawweapon hud_temp
    
	setvarvar STATE_PARAM1 currentweapon
	state check_using_secondary
	
    ifvare hud_temp 2 // weapon icons
    {
        setvar hud_tilenum -1
        
        switch currentweapon
            case PISTOL_WEAPON
                setvar hud_tilenum FIRSTGUNSPRITE
                break
            case CHAINGUN_WEAPON
				ifvare STATE_RETURN 1
				{
					setvar hud_tilenum PLASMASPRITE
				}
				else
				{
					setvar hud_tilenum CHAINGUNSPRITE
				}
                break
            case RPG_WEAPON
                ifvare STATE_RETURN 1
				{
					setvar hud_tilenum RAILGUNSPRITE
				}
				else
				{
					setvar hud_tilenum RPGSPRITE
				}
                break
            case FREEZE_WEAPON
				ifvare STATE_RETURN 1
				{
					setvar hud_tilenum FLAMETHROWERSPRITE
				}
				else
				{
					setvar hud_tilenum FREEZESPRITE
				}
                break
            case SHRINKER_WEAPON
                setvar hud_tilenum SHRINKERSPRITE
                break
            case GROW_WEAPON
                setvar hud_tilenum GROWSPRITEICON
                break
            case DEVISTATOR_WEAPON
				ifvare STATE_RETURN 1
				{
					setvar hud_tilenum DFGSPRITE
				}
				else
				{
					setvar hud_tilenum DEVISTATORSPRITE
				}
                break
            case TRIPBOMB_WEAPON
                setvar hud_tilenum TRIPBOMBSPRITE
                break
            case HANDREMOTE_WEAPON
            case HANDBOMB_WEAPON
                setvar hud_tilenum HEAVYHBOMB
                break
            case SHOTGUN_WEAPON
                setvar hud_tilenum SHOTGUNSPRITE
                break
            default
                addlogvar currentweapon
                break
                /*
            case KNEE_WEAPON
                setvar hud_tilenum -1
                break
                */
        endswitch
        
		ifvarn hud_tilenum -1
        {
            setvar hud_x 160
            setvarvar hud_y weapon_pos
            mulvarvar hud_y weapon_pos
            addvar hud_y 180
            setvar hud_scale 65536
            getuserdef[THISACTOR].statusbarscale hud_temp2
            mulvarvar hud_scale hud_temp2
            divvar hud_scale 100
            rotatesprite hud_x hud_y hud_scale 0 hud_tilenum 0 0 2 windowx1 windowy1 windowx2 windowy2
        }
    }
    
    ifvarn hud_temp 1 break // If we are not displaying the actual HUD weapons, stop processing.
    
    // these gamevars can get changed in the states up above, so reset them now.
    setvar hud_scale 65536
    setvar hud_orientation 0
    setvar hud_angle 0
    setvarvar hud_shade gs
    
    state draw_quick_kick
        
    // cleanup
    setvar hud_orientation 0
    setvar hud_angle 0
    guniqhudid 0
    
    getactor[playerid].xrepeat hud_temp
    ifvarl hud_temp 40
        state draw_shrunk_fists
    else
    {
        getactor[playerid].pal hud_pal
        ifvarn hud_pal 1
        {
            getplayer[THISACTOR].cursectnum hud_temp2
            ifvarg hud_temp2 -1
                getsector[hud_temp2].floorpal hud_pal
            else
                setvar hud_pal 0
        }
        
        switch currentweapon
            case KNEE_WEAPON
				setvarvar hud_totaltime WEAPON0_TOTALTIME
				state draw_kick
                break
            case TRIPBOMB_WEAPON
                setvarvar hud_totaltime WEAPON8_TOTALTIME
                state draw_tripbomb
                break
            case RPG_WEAPON
                setvarvar hud_totaltime WEAPON4_TOTALTIME
				ifvare STATE_RETURN 1
				{
					state draw_railgun
				}
				else
				{
					state draw_rpg
				}
                break
            case SHOTGUN_WEAPON
                setvarvar hud_totaltime WEAPON2_TOTALTIME
				ifvare STATE_RETURN 1
				{
					state draw_ssg
				}
				else
				{
					state draw_shotgun
				}
                break
            case CHAINGUN_WEAPON
                setvarvar hud_temp4 WEAPON3_FIREDELAY
                setvarvar hud_totaltime WEAPON3_TOTALTIME
				ifvare STATE_RETURN 1
				{
					state draw_plasmarifle
				}
				else
				{
					state draw_chaingun
				}
                break
            case PISTOL_WEAPON
                setvarvar hud_temp3 WEAPON1_RELOAD
                setvarvar hud_temp4 WEAPON1_FIREDELAY
                setvarvar hud_totaltime WEAPON1_TOTALTIME
                state draw_pistol
                break
            case HANDBOMB_WEAPON
                setvarvar hud_totaltime WEAPON5_TOTALTIME
                state draw_pipebomb
                break
            case HANDREMOTE_WEAPON
                setvarvar hud_totaltime WEAPON10_TOTALTIME
                state draw_detonator
                break
            case DEVISTATOR_WEAPON
                setvarvar hud_totaltime WEAPON7_TOTALTIME
				ifvare STATE_RETURN 1
				{
					state draw_dfg
				}
				else
				{
					state draw_devastator
				}
                break
            case FREEZE_WEAPON
				setvarvar hud_totaltime WEAPON9_TOTALTIME
				ifvare STATE_RETURN 1
				{
					state draw_flamethrower
				}
				else
				{
					state draw_freezer
				}
                break
            case GROW_WEAPON
                setvarvar hud_totaltime WEAPON11_TOTALTIME
                state draw_expander
                break
            case SHRINKER_WEAPON
                setvarvar hud_totaltime WEAPON6_TOTALTIME
                state draw_shrinker
                break
            default
                addlogvar currentweapon
                break
        endswitch
        
        // cleanup
        setvar hud_orientation 0
        setvar hud_angle 0
		setvar hud_alpha 0
        guniqhudid 0
    }
endevent

onevent EVENT_DISPLAYTIP
	setvar RETURN 1
	
	// hud pal
	getactor[playerid].pal hud_pal
	ifvarn hud_pal 1
	{
		getplayer[THISACTOR].cursectnum hud_temp2
		ifvarg hud_temp2 -1
			getsector[hud_temp2].floorpal hud_pal
		else
			setvar hud_pal 0
	}
	
	// X Position
	setvar hud_x 170
	getinput[THISACTOR].avel hud_temp
	shiftvarr hud_temp 5
	addvarvar hud_x hud_temp
	subvarvar hud_x looking_angSR1
	
	// Y Position
	setvar hud_y 240
	
	// TipYOffset
	getplayer[THISACTOR].tipincs hud_temp
	switch hud_temp
		case 0: setvar hud_temp2 0 break
		case 1: setvar hud_temp2 -8 break
		case 2: setvar hud_temp2 -16 break
		case 3: setvar hud_temp2 -32 break
		case 4: setvar hud_temp2 -64 break
		case 5: setvar hud_temp2 -84 break
		case 6:
		case 7:
		case 8:
		case 9:
		case 10:
		case 11:
		case 12:
		case 13:
		case 14:
		case 15:
			setvar hud_temp2 -108
			break
		case 16: setvar hud_temp2 -96 break
		case 17: setvar hud_temp2 -72 break
		case 18: setvar hud_temp2 -64 break
		case 19: setvar hud_temp2 -32 break
		case 20: setvar hud_temp2 -16 break
		case 21: setvar hud_temp2 0 break
		case 22: setvar hud_temp2 16 break
		case 23: setvar hud_temp2 32 break
		case 24: setvar hud_temp2 48 break
	endswitch
	
	shiftvarr hud_temp2 1
	addvarvar hud_y hud_temp2
	
	// TipY
	getplayer[THISACTOR].look_ang hud_temp
	abs hud_temp
	divvar hud_temp 9
	getplayer[THISACTOR].hard_landing hud_temp2
	shiftvarl hud_temp2 3
	subvarvar hud_temp hud_temp2
	addvarvar hud_y hud_temp
	
	// Tip Y Horiz Offset
	getplayer[THISACTOR].horiz hud_temp
	getplayer[THISACTOR].horizoff hud_temp2
	subvarvar hud_temp hud_temp2
	shiftvarr hud_temp 4
	subvarvar hud_y hud_temp
	
	// Orientation/Shade/HudID
	setvar hud_orientation DRAWEAP_CENTER
	setvarvar hud_shade gs
	guniqhudid 201
	
	// Tilenum
	getplayer[THISACTOR].tipincs hud_temp
	ifvarg hud_temp 10
	{
		setvar hud_tilenum TIP
	}
	else ifvarg hud_temp 9
	{
		setvar hud_tilenum TIP_EXTRA1
	}
	else ifvarg hud_temp 8
	{
		setvar hud_tilenum 2577
	}
	else
	{
		setvar hud_tilenum TIP_EXTRA2
	}
	
	// Draw
	state G_DrawTileScaled
	
	// cleanup
	setvar hud_scale 65536
	setvar hud_orientation 0
	setvar hud_angle 0
	guniqhudid 0
endevent