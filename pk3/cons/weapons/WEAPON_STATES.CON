// define ROTATESPRITE_MAX 2048

// preliminary functions

state G_DrawTile
	getplayer[THISACTOR].cursectnum hud_G_Draw_temp2
	ifvarg hud_G_Draw_temp2 -1
		getsector[hud_G_Draw_temp2].floorpal hud_G_Draw_temp2
	else
		setvar hud_G_Draw_temp2 0

	ifvarand hud_orientation RS_YFLIP
		addvar hud_angle 1024
		
	orvar hud_orientation RS_AUTO
				 
	rotatesprite hud_x hud_y hud_scale hud_angle hud_tilenum hud_shade hud_G_Draw_temp2 hud_orientation windowx1 windowy1 windowx2 windowy2
		
	ifvarand hud_orientation RS_AUTO nullop else
		subvar hud_orientation RS_AUTO
	
	ifvarand hud_orientation RS_YFLIP
		subvar hud_angle 1024
ends

state G_DrawTilePal
	ifvarand hud_orientation RS_YFLIP
		addvar hud_angle 1024
		
	orvar hud_orientation RS_AUTO

	rotatesprite hud_x hud_y hud_scale hud_angle hud_tilenum hud_shade hud_pal hud_orientation windowx1 windowy1 windowx2 windowy2
		
	ifvarand hud_orientation RS_AUTO nullop else
		subvar hud_orientation RS_AUTO
	
	ifvarand hud_orientation RS_YFLIP
		subvar hud_angle 1024
ends

state G_DrawTileScaled
	setvar hud_G_Draw_temp 192 // xoff

	switch currentweapon
		case DEVISTATOR_WEAPON
		case TRIPBOMB_WEAPON
			setvar hud_G_Draw_temp 160
			break
		default
			ifvarand hud_orientation DRAWEAP_CENTER
			{
				setvar hud_G_Draw_temp 160
				subvar hud_orientation DRAWEAP_CENTER
			}
			break
	endswitch

	ifvarand hud_orientation RS_YFLIP
		addvar hud_angle 1024
		
	/*
	ifvarg rendermode 2
		ifvarn usemodels 0
			ifhasmodel hud_tilenum hud_pal
			{
				setvar hud_G_Draw_temp2 224
				mulvarvar hud_G_Draw_temp2 weaponscale
				divvar hud_G_Draw_temp2 100
				
				addvar hud_y 224
				subvarvar hud_y hud_G_Draw_temp2
			}
	*/
	
	mulvarvar hud_x weaponscale
	divvar hud_x 100
	setvarvar hud_G_Draw_temp2 hud_G_Draw_temp
	mulvarvar hud_G_Draw_temp2 weaponscale
	divvar hud_G_Draw_temp2 100
	subvarvar hud_G_Draw_temp hud_G_Draw_temp2
	addvarvar hud_x hud_G_Draw_temp
	
	mulvarvar hud_y weaponscale
	divvar hud_y 100
	setvar hud_G_Draw_temp 200
	setvarvar hud_G_Draw_temp2 hud_G_Draw_temp
	mulvarvar hud_G_Draw_temp2 weaponscale
	divvar hud_G_Draw_temp2 100
	subvarvar hud_G_Draw_temp hud_G_Draw_temp2
	addvarvar hud_y hud_G_Draw_temp
	
	// setvar hud_scale 65536 // do this elsewhere; leave it open for modification
	mulvarvar hud_scale weaponscale
	divvar hud_scale 100

	orvar hud_orientation RS_AUTO
	
	// Interp fix for Trip Mines and weapon switching.
	getplayer[THISACTOR].weapon_pos hud_G_Draw_temp
	ifvarn hud_G_Draw_temp -9
	ifvarl hud_G_Draw_temp 9
	{
		orvar hud_orientation RS_LERP
	}
	
	// Custom flag to disable lerp in certain weapon states.
	ifvarand hud_orientation DRAWEAP_NOLERP
	{
		ifvarand hud_orientation RS_LERP
			subvar hud_orientation RS_LERP
			
		subvar hud_orientation DRAWEAP_NOLERP
	}
	
	rotatesprite hud_x hud_y hud_scale hud_angle hud_tilenum hud_shade hud_pal hud_orientation windowx1 windowy1 windowx2 windowy2
		
	ifvarand hud_orientation RS_AUTO
		subvar hud_orientation RS_AUTO

	ifvarand hud_orientation RS_LERP
		subvar hud_orientation RS_LERP
		
	ifvarand hud_orientation RS_FORCELERP
		subvar hud_orientation RS_FORCELERP
	
	ifvarand hud_orientation RS_YFLIP
		subvar hud_angle 1024
ends

state G_DrawWeaponTile
	// basic fading between player weapon shades
	ifvarvarn hud_shade hud_shadef
	{
		setvar hud_G_Draw_temp 0
		ifvare hud_pal 0 setvar hud_G_Draw_temp 1
		ifvarvare hud_pal hud_palf setvar hud_G_Draw_temp 1
		ifvare hud_G_Draw_temp 1
		{
			setvarvar hud_G_Draw_temp hud_shade
			subvarvar hud_G_Draw_temp hud_shadef
			setvarvar hud_G_Draw_temp2 hud_G_Draw_temp
			shiftvarr hud_G_Draw_temp 2
			addvarvar hud_shadef hud_G_Draw_temp
			
			ifvare hud_G_Draw_temp 0
			{
				shiftvarr hud_G_Draw_temp2 1
				addvarvar hud_shadef hud_G_Draw_temp2
				ifvare hud_G_Draw_temp2 0
					setvarvar hud_shadef hud_shade
			}
		}
	}
	else
		setvarvar hud_shadef hud_shade
		
	setvarvar hud_palf hud_pal
	setvarvar hud_shade hud_shadef
	
	state G_DrawTileScaled
ends

// helper states

state reset_hud_weapon_x_coordinate
	setvarvar hud_x weapon_xoffset
	subvarvar hud_x looking_angSR1
ends
state reset_hud_weapon_y_coordinate
	setvarvar hud_y looking_arc
	subvarvar hud_y gun_pos
ends
state reset_hud_weapon_coordinates
	state reset_hud_weapon_x_coordinate
	state reset_hud_weapon_y_coordinate
ends

state determine_animation
	getuserdef[THISACTOR].pause_on hud_temp
	ifvarn hud_temp 0
		setvar hud_temp 1
	
	getplayer[THISACTOR].gm OLDMP_TEMP
	ifvarand OLDMP_TEMP 1 // MODE_MENU
		orvar hud_temp 1

	getactor[playerid].pal hud_G_Draw_temp
	ifvare hud_G_Draw_temp 1
		orvar hud_temp 1
ends

// Custom States

// STATE_PARAM1 = Weapon Index
// STATE_PARAM2 = Type (0 = Primary, 1 = Secondary)
// STATE_PARAM3 = 0 = No, 1 = Yes 
state set_have_weapon
	setvar STATE_TEMP4 1
	shiftvarvarl STATE_TEMP4 STATE_PARAM1
	
	ifvare STATE_PARAM2 1 // Secondary
	{
		ifvare STATE_PARAM3 1
			orvarvar BF_HAS_SECONDARY STATE_TEMP4
		else ifvarvarand BF_HAS_SECONDARY STATE_TEMP4
			subvarvar BF_HAS_SECONDARY STATE_TEMP4
	}
	else
	{
		ifvare STATE_PARAM3 1
			orvarvar BF_HAS_PRIMARY STATE_TEMP4
		else ifvarvarand BF_HAS_PRIMARY STATE_TEMP4
			subvarvar BF_HAS_PRIMARY STATE_TEMP4
	}
ends

// STATE_PARAM1 = Weapon Index
// STATE_PARAM2 = 0 = Primary, 1 = Subweapon
state check_have_weapon
	setvar STATE_RETURN 0
	
	setvar STATE_TEMP4 1
	shiftvarvarl STATE_TEMP4 STATE_PARAM1
	
	ifvare STATE_PARAM2 1
	{
		ifvarvarand BF_HAS_SECONDARY STATE_TEMP4
			setvar STATE_RETURN 1
	}
	else
	{
		ifvarvarand BF_HAS_PRIMARY STATE_TEMP4
			setvar STATE_RETURN 1
	}
ends

// STATE_PARAM1 = Weapon Index
// STATE_PARAM2 = State (0 = Using Primary, 1 = Using secondary)
state set_weapontype	
	setvar STATE_TEMP4 1
	shiftvarvarl STATE_TEMP4 STATE_PARAM1
	
	ifvare STATE_PARAM2 1
		orvarvar BF_USING_SECONDARY STATE_TEMP4
	else ifvarvarand BF_USING_SECONDARY STATE_TEMP4
		subvarvar BF_USING_SECONDARY STATE_TEMP4
		
	// Set Attributes
	ifvare STATE_PARAM2 1 // Secondary
	{
		switch STATE_PARAM1
			case FREEZE_WEAPON: // Flamethrower
				setvar WEAPON9_SHOOTS FIREBALL
				setvar WEAPON9_TOTALTIME 4
				setvar WEAPON9_FIRESOUND 0
				setvar WEAPON9_INITIALSOUND FLAMETHROWER_START
				setplayer[THISACTOR].ammo_amount FREEZE_WEAPON FLAMETHROWER_AMMO
				break
				
			case CHAINGUN_WEAPON: // Plasma Rifle
				setvar WEAPON3_FLAGS 0
				setvar WEAPON3_SHOOTS PLASMABALL
				setvar WEAPON3_FIREDELAY 8
				setvar WEAPON3_TOTALTIME 16
				setvar WEAPON3_HOLDDELAY 0
				setvar WEAPON3_SPAWN 0
				setvar WEAPON3_SPAWNTIME 0
				setvar WEAPON3_FIRESOUND PLASMARIFLE_FIRE
				setvar WEAPON3_INITIALSOUND PLASMARIFLE_CHARGE
				setvar WEAPON3_SHOTSPERBURST 1
				setplayer[THISACTOR].ammo_amount CHAINGUN_WEAPON PLASMARIFLE_AMMO
				break
				
			case RPG_WEAPON: // Railgun
				setvar WEAPON4_FLAGS 0
				setvar WEAPON4_SHOOTS RAILGUNSHOT
				setvar WEAPON4_FIREDELAY 2
				setvar WEAPON4_TOTALTIME 25
				setvar WEAPON4_FIRESOUND 0
				setvar WEAPON4_INITIALSOUND 0
				setplayer[THISACTOR].ammo_amount RPG_WEAPON RAILGUN_AMMO
				break
				
			case SHOTGUN_WEAPON: // SSG
				setvar WEAPON2_FLAGS 1024
				setvar WEAPON2_SHOOTS SSGPELLET
				setvar WEAPON2_FIREDELAY 2
				setvar WEAPON2_TOTALTIME 53
				setvar WEAPON2_SPAWNTIME 0
				setvar WEAPON2_SPAWN 0
				setvar WEAPON2_SHOTSPERBURST 20 // 14
				setvar WEAPON2_FIRESOUND SSG_FIRE
				setvar WEAPON2_SOUND2SOUND 0
				setvar WEAPON2_SOUND2TIME 0
				setvar WEAPON2_SELECTSOUND SSG_CLOSE
				break
		endswitch
	}
	else // Primary
	{
		switch STATE_PARAM1
			case FREEZE_WEAPON:
				setvar WEAPON9_SHOOTS FREEZEBLAST
				setvar WEAPON9_TOTALTIME 5
				setvar WEAPON9_FIRESOUND FREEZETHROWER_FIRE
				setvar WEAPON9_INITIALSOUND FREEZETHROWER_FIRE
				setplayer[THISACTOR].ammo_amount FREEZE_WEAPON FREEZETHROWER_AMMO
				break

			case CHAINGUN_WEAPON:
				setvar WEAPON3_FLAGS 73812
				setvar WEAPON3_SHOOTS CHAINGUN
				setvar WEAPON3_FIREDELAY 3
				setvar WEAPON3_TOTALTIME 12
				setvar WEAPON3_HOLDDELAY 3
				setvar WEAPON3_SPAWN SHELL
				setvar WEAPON3_SPAWNTIME 1
				setvar WEAPON3_FIRESOUND CHAINGUN_FIRE
				setvar WEAPON3_INITIALSOUND 0
				setvar WEAPON3_SHOTSPERBURST 0
				setplayer[THISACTOR].ammo_amount CHAINGUN_WEAPON RIPPER_AMMO
				break

			case RPG_WEAPON
				setvar WEAPON4_FLAGS 0
				setvar WEAPON4_SHOOTS RPG
				setvar WEAPON4_FIREDELAY 4
				setvar WEAPON4_TOTALTIME 20
				setvar WEAPON4_FIRESOUND 0
				setvar WEAPON4_INITIALSOUND 0
				setplayer[THISACTOR].ammo_amount RPG_WEAPON RPG_AMMO
				break

			case SHOTGUN_WEAPON
				setvar WEAPON2_FLAGS 1024
				setvar WEAPON2_SHOOTS SHOTGUN
				setvar WEAPON2_FIREDELAY 4
				setvar WEAPON2_TOTALTIME 30
				setvar WEAPON2_SPAWNTIME 24
				setvar WEAPON2_SPAWN SHOTGUNSHELL
				setvar WEAPON2_SHOTSPERBURST 7
				setvar WEAPON2_FIRESOUND SHOTGUN_FIRE
				setvar WEAPON2_SOUND2SOUND SHOTGUN_COCK
				setvar WEAPON2_SOUND2TIME 15
				setvar WEAPON2_SELECTSOUND SHOTGUN_COCK
				break
		endswitch
	}
ends

// STATE_PARAM1 = Weapon Index
state check_using_secondary
	setvar STATE_RETURN 0
	
	setvar STATE_TEMP4 1
	shiftvarvarl STATE_TEMP4 STATE_PARAM1
	
	ifvarvarand BF_USING_SECONDARY STATE_TEMP4
		setvar STATE_RETURN 1
ends

// STATE_PARAM1 = Weapon
// STATE_PARAM2 = 0 is primary, 1 is secondary
// STATE_RETURN = 1 if successful switch
state switch_weapon
	setvar STATE_RETURN 0
	
	state check_have_weapon
	setvarvar STATE_TEMP1 STATE_RETURN
	
	state check_using_secondary
	setvarvar STATE_TEMP2 STATE_RETURN
	
	setvar STATE_RETURN 0
	
	//redefinequote 500 Switch #1 - RETURN: %d STATE_TEMP1: %d STATE_TEMP2: %d
	//qsprintf 500 500 STATE_RETURN STATE_TEMP1 STATE_TEMP2
	//userquote 500
	
	ifvare STATE_PARAM2 1 // Secondary
	{
		ifvare STATE_TEMP1 1 // Have Weapon?
		{
			ifvare STATE_TEMP2 1 // Already using secondary?
			{
				//redefinequote 500 ^2Already using secondary, breaking.
				//userquote 500
				break
			}
			
			// Check Ammo
			switch STATE_PARAM1
				case FREEZE_WEAPON: // Flamethrower
					ifvarg FLAMETHROWER_AMMO 0
						setvar STATE_RETURN 1
					break
				case CHAINGUN_WEAPON: // Plasma Rifle
					ifvarg PLASMARIFLE_AMMO 0
						setvar STATE_RETURN 1
					break
				case RPG_WEAPON: // Railgun
					ifvarg RAILGUN_AMMO 0
						setvar STATE_RETURN 1
					break
				case SHOTGUN_WEAPON: // SSG
					getplayer[THISACTOR].ammo_amount SHOTGUN_WEAPON STATE_TEMP1
					ifvarg STATE_TEMP1 1
						setvar STATE_RETURN 1
					break
			endswitch
			
			ifvare STATE_RETURN 1
			{
				state set_weapontype
				break
			}
		}
	}
	else // Primary
	{
		ifvare STATE_TEMP1 1 // Have Weapon?
		{
			ifvare STATE_TEMP2 0 // Already using primary?
				break
			
			// Check Ammo
			switch STATE_PARAM1
				case FREEZE_WEAPON: // Freezethrower
					ifvarg FREEZETHROWER_AMMO 0
						setvar STATE_RETURN 1
					break
				case CHAINGUN_WEAPON: // Ripper
					ifvarg RIPPER_AMMO 0
						setvar STATE_RETURN 1
					break
				case RPG_WEAPON: // RPG
					ifvarg RPG_AMMO 0
						setvar STATE_RETURN 1
					break
				case SHOTGUN_WEAPON: // Shotgun
					getplayer[THISACTOR].ammo_amount SHOTGUN_WEAPON STATE_TEMP1
					ifvarg STATE_TEMP1 0
						setvar STATE_RETURN 1
					break
			endswitch		
			
			ifvare STATE_RETURN 1
			{
				state set_weapontype
				break
			}
		}
	}
	
	setvar STATE_RETURN 0
ends

state check_weapon_ownership
	setvarvar STATE_TEMP1 STATE_PARAM1
	
	setvar STATE_PARAM1 1 // Weapon Index
	whilevarn STATE_PARAM1 11
	{
		setvar STATE_PARAM2 0
		state check_have_weapon
		ifvare STATE_RETURN 0
		{
			setvar STATE_PARAM2 1
			state check_have_weapon
			ifvare STATE_RETURN 1
			{
				state set_weapontype
			}
		}
		
		addvar STATE_PARAM1 1
	}
	
	setvarvar STATE_PARAM1 STATE_TEMP1
ends

// STATE_PARAM1 = Weapon
state print_weapon_name
	ifvarg numplayers 1
	ifvarn predicting 1
		break
		
	setvar WEAPONCHANGETIMER 30
	setvar WEAPONQUOTEALPHA 0
	state check_using_secondary
	
	switch STATE_PARAM1
		case KNEE_WEAPON:
		case PISTOL_WEAPON:
		case HANDBOMB_WEAPON:
		case SHRINKER_WEAPON:
		case DEVISTATOR_WEAPON:
		case TRIPBOMB_WEAPON:
		case HANDREMOTE_WEAPON:
		case GROW_WEAPON:
			setvar WEAPONQUOTE 690
			addvarvar WEAPONQUOTE STATE_PARAM1
			break
			
		case SHOTGUN_WEAPON:
			ifvare STATE_RETURN 1
			{
				setvar WEAPONQUOTE 705
			}
			else
			{
				setvar WEAPONQUOTE 692
			}
			break
		case CHAINGUN_WEAPON:
			ifvare STATE_RETURN 1
			{
				setvar WEAPONQUOTE 703
			}
			else
			{
				setvar WEAPONQUOTE 693
			}
			break
		case RPG_WEAPON:
			ifvare STATE_RETURN 1
			{
				setvar WEAPONQUOTE 704
			}
			else
			{
				setvar WEAPONQUOTE 694
			}
			break
		case FREEZE_WEAPON:
			ifvare STATE_RETURN 1
			{
				setvar WEAPONQUOTE 702
			}
			else
			{
				setvar WEAPONQUOTE 699
			}
			break
	endswitch
ends

// STATE_PARAM1 = Weapon Index
// STATE_PARAM2 = Switch type (0 = Key, 1 = Next, 2 = Previous)
state check_alt_weapons
	getplayer[THISACTOR].kickback_pic TEMP
	ifvarn TEMP 0
		break
	
	state check_using_secondary
	setvarvar TEMP STATE_PARAM1 // Keep PARAM1, since it'll get overwritten
	setvarvar TEMP2 STATE_PARAM2 // Store PARAM2, since it'll get overwritten
	setvarvar TEMP3 STATE_RETURN // Store whether we're using the secondary weapon
	setvar STATE_RETURN 0 // Clear the return
	
	ifvare TEMP2 0 // Key
	{
		ifvarvarn STATE_PARAM1 WEAPON
			break
			
		ifvare TEMP3 0
		{
			setvar STATE_PARAM2 WEAP_SECONDARY
			state switch_weapon
		}
		else
		{
			setvar STATE_PARAM2 WEAP_PRIMARY
			state switch_weapon
		}
	}
	else ifvare TEMP2 1 // Next Weapon
	{
		//redefinequote 500 Check Alt Next #1 - %d
		//qsprintf 500 500 STATE_RETURN
		//userquote 500
		
		setvar STATE_PARAM1 1
		whilevarn STATE_PARAM1 11
		{
			ifvarvarn STATE_PARAM1 WEAPON
			{
				setvar STATE_PARAM2 WEAP_PRIMARY
				state switch_weapon
			}
			addvar STATE_PARAM1 1
		}
		
		setvarvar STATE_PARAM1 TEMP
		setvar STATE_PARAM2 WEAP_SECONDARY
		state switch_weapon
		
		//redefinequote 500 Check Alt Next #2 - %d
		//qsprintf 500 500 STATE_RETURN
		//userquote 500
	}
	else ifvare TEMP2 2 // Previous Weapon
	{
		//redefinequote 500 Check Alt Previous #1 - %d
		//qsprintf 500 500 STATE_RETURN
		//userquote 500
		
		setvar STATE_PARAM1 1
		whilevarn STATE_PARAM1 11
		{
			ifvarvarn STATE_PARAM1 WEAPON
			{
				setvar STATE_PARAM2 WEAP_SECONDARY
				state switch_weapon
			}
			addvar STATE_PARAM1 1
		}
		
		setvarvar STATE_PARAM1 TEMP
		setvar STATE_PARAM2 WEAP_PRIMARY
		state switch_weapon
		
		//redefinequote 500 Check Alt Previous #2 - %d
		//qsprintf 500 500 STATE_RETURN
		//userquote 500
	}
	
	ifvarn STATE_RETURN 0
	{
		ifvarg TEMP2 0
		{
			setvarvar RETURN STATE_PARAM1
		}
		
		setplayer[THISACTOR].weapon_pos -9
		state print_weapon_name // Passed STATE_PARAM1
		
		switch STATE_PARAM1
			case 0: soundvar WEAPON0_SELECTSOUND break
			case 1: soundvar WEAPON1_SELECTSOUND break
			case 2: soundvar WEAPON2_SELECTSOUND break
			case 3: soundvar WEAPON3_SELECTSOUND break
			case 4: soundvar WEAPON4_SELECTSOUND break
			case 5: soundvar WEAPON5_SELECTSOUND break
			case 6: soundvar WEAPON6_SELECTSOUND break
			case 7: soundvar WEAPON7_SELECTSOUND break
			case 8: soundvar WEAPON8_SELECTSOUND break
			case 9: soundvar WEAPON9_SELECTSOUND break
			case 10: soundvar WEAPON10_SELECTSOUND break
			case 11: soundvar WEAPON11_SELECTSOUND break
		endswitch
	}
ends

state do_recoil
	// Break out if we're in multiplayer, and are not in the first phase of prediction.
	ifvarg numplayers 1
	ifvarn predicting 1
		break
		
	switch STATE_PARAM1
		case DEVISTATOR_WEAPON:
			setvar RECOIL_AMOUNT 2
			mulvar RECOIL_AMOUNT 65536
			setvar RECOIL_SPEED 32768
			break
		case CHAINGUN_WEAPON:
			ifvare STATE_RETURN WEAP_SECONDARY
			{
				setvar RECOIL_AMOUNT 8
				mulvar RECOIL_AMOUNT 65536
				setvar RECOIL_SPEED 49152
			}
			else
			{
				setvar RECOIL_AMOUNT 32768
				setvar RECOIL_SPEED 16384
			}
			break
		case RPG_WEAPON:
			ifvare STATE_RETURN WEAP_SECONDARY
			{
				setvar RECOIL_AMOUNT 4
				mulvar RECOIL_AMOUNT 65536
				setvar RECOIL_SPEED 65536
			}
			else
			{
				setvar RECOIL_AMOUNT 10
				mulvar RECOIL_AMOUNT 65536
				setvar RECOIL_SPEED 32768
			}
			break
		case SHOTGUN_WEAPON:
			ifvare STATE_RETURN WEAP_SECONDARY
			{
				setvar RECOIL_AMOUNT 16
				mulvar RECOIL_AMOUNT 65536
				setvar RECOIL_SPEED 49152
			}
			else
			{
				setvar RECOIL_AMOUNT 4
				mulvar RECOIL_AMOUNT 65536
				setvar RECOIL_SPEED 49152
			}
			break
		case PISTOL_WEAPON:
			setvar RECOIL_AMOUNT 32768
			setvar RECOIL_SPEED 10922
			break
	endswitch
ends

state handle_recoil
	ifvarg RECOIL_AMOUNT 0
	ifvarg RECOIL_SPEED 0
	{
		addvarvar cameraq16horiz RECOIL_AMOUNT
		
		ifvarvarn RECOIL_LASTTIC totalclock
		ifvarg clock_diff 0
		{
			setvarvar CL_TEMP1 RECOIL_SPEED
			mulvarvar CL_TEMP1 clock_diff
			subvarvar RECOIL_AMOUNT CL_TEMP1
			
			setvarvar RECOIL_LASTTIC totalclock
		}
	}
ends

state handle_weaponchangetimer
	ifvarg numplayers 1
	ifvarn predicting 1
		break
		
	ifvarg WEAPONCHANGETIMER 0
	{
		subvar WEAPONCHANGETIMER 1
	}
	else
	{
		ifvarl WEAPONQUOTEALPHA 255
		{
			addvar WEAPONQUOTEALPHA 32
		}
	}
ends

state player_updateweapons
	state handle_weaponchangetimer
	
	ifp palive
	{
		getplayer[THISACTOR].curr_weapon STATE_PARAM1
		
		state check_using_secondary
		setvarvar TEMP STATE_RETURN
		setvar STATE_RETURN 0
		
		ifvare STATE_PARAM1 FREEZE_WEAPON
		{
			ifvare TEMP 1
			{
				setplayer[THISACTOR].ammo_amount FREEZE_WEAPON FLAMETHROWER_AMMO
				// Flamethrower empty ammo check
				ifvare FLAMETHROWER_AMMO 0
				{
					setvar STATE_PARAM2 WEAP_PRIMARY
					state switch_weapon
				}
			}
			else
			{
				setplayer[THISACTOR].ammo_amount FREEZE_WEAPON FREEZETHROWER_AMMO
				// Freezethrower empty ammo check
				ifvare FREEZETHROWER_AMMO 0
				{
					setvar STATE_PARAM2 WEAP_SECONDARY
					state switch_weapon
				}
			}
		}
		else ifvare STATE_PARAM1 CHAINGUN_WEAPON
		{
			ifvare TEMP 1
			{
				setplayer[THISACTOR].ammo_amount CHAINGUN_WEAPON PLASMARIFLE_AMMO
				// Plasma rifle empty ammo check
				ifvare PLASMARIFLE_AMMO 0
				{
					setvar STATE_PARAM2 WEAP_PRIMARY
					state switch_weapon
				}
			}
			else
			{
				setplayer[THISACTOR].ammo_amount CHAINGUN_WEAPON RIPPER_AMMO
				// Ripper empty ammo check
				ifvare RIPPER_AMMO 0
				{
					setvar STATE_PARAM2 WEAP_SECONDARY
					state switch_weapon
				}
			}
		}
		else ifvare STATE_PARAM1 RPG_WEAPON
		{
			ifvare TEMP 1
			{
				setplayer[THISACTOR].ammo_amount RPG_WEAPON RAILGUN_AMMO
				// Railgun empty ammo check
				ifvare RAILGUN_AMMO 0
				{
					setvar STATE_PARAM2 WEAP_PRIMARY
					state switch_weapon
				}
			}
			else
			{
				setplayer[THISACTOR].ammo_amount RPG_WEAPON RPG_AMMO
				// RPG empty ammo check
				ifvare RPG_AMMO 0
				{
					setvar STATE_PARAM2 WEAP_SECONDARY
					state switch_weapon
				}
			}
		}
		else ifvare STATE_PARAM1 SHOTGUN_WEAPON
		{
			ifvare TEMP 1
			{
				getplayer[THISACTOR].kickback_pic TEMP2
				ifvare TEMP2 19
					sound SSG_OPEN
				else ifvare TEMP2 33
					sound SSG_LOAD
				else ifvare TEMP2 44
					sound SSG_CLOSE
				
				getplayer[THISACTOR].ammo_amount SHOTGUN_WEAPON TEMP3
				// Switch if less than 2 shells.
				ifvarl TEMP3 2
				{
					setvar STATE_PARAM2 WEAP_PRIMARY
					state switch_weapon
				}
			}
			else
			{
				getplayer[THISACTOR].kickback_pic TEMP2
				ifvare TEMP2 17
				{
					randvar RANDOM_SOUND 3
					switch RANDOM_SOUND
						case 0: sound SHELL_EJECT1 break
						case 1: sound SHELL_EJECT2 break
						case 2: sound SHELL_EJECT3 break
						case 3: sound SHELL_EJECT4 break
					endswitch
				}
			}
		}
		
		ifvare STATE_RETURN 1 // If any switch weapon state returns true
		{
			setplayer[THISACTOR].kickback_pic 0
			setplayer[THISACTOR].weapon_pos -9
		}
		
		ifvare COOP GM_ROIDMATCH
		{
			setplayer[THISACTOR].jetpack_amount 1600
			setplayer[THISACTOR].steroids_amount 399
			setplayer[THISACTOR].falling_counter 0
			setplayer[THISACTOR].gotweapon DEVISTATOR_WEAPON 1
			setplayer[THISACTOR].ammo_amount DEVISTATOR_WEAPON MAXDEVISTATORAMMO
			setplayer[THISACTOR].curr_weapon DEVISTATOR_WEAPON
		}
		else ifvare COOP GM_INSTAGIB
		{
			setvar STATE_PARAM1 RPG_WEAPON
			setvar STATE_PARAM2 WEAP_SECONDARY
			state check_using_secondary
			ifvare STATE_RETURN 0
			{
				state set_weapontype
				ifvare predicting 0 // Prediction check to prevent desync
				{
					setprojectile[RAILGUNSHOT].extra 400
				}
			}
			
			setplayer[THISACTOR].gotweapon RPG_WEAPON 1
			setplayer[THISACTOR].curr_weapon RPG_WEAPON
			setplayervar[THISACTOR].RAILGUN_AMMO MAXRAILGUNAMMO
		}
	}
ends

state player_tossweapon
	getplayer[THISACTOR].curr_weapon STATE_PARAM1
	state check_using_secondary
	
	switch STATE_PARAM1
		case PISTOL_WEAPON: spawn FIRSTGUNSPRITE break
		case SHOTGUN_WEAPON:
			ifvare STATE_RETURN 1
				spawn SSGSPRITE
			else
				spawn SHOTGUNSPRITE
			break
		case CHAINGUN_WEAPON:
			ifvare STATE_RETURN 1
				spawn PLASMASPRITE
			else
				spawn CHAINGUNSPRITE
			break
		case RPG_WEAPON: 
			ifvare STATE_RETURN 1
				spawn RAILGUNSPRITE
			else
				spawn RPGSPRITE
			break
		case HANDBOMB_WEAPON: spawn HBOMBAMMO break
		case SHRINKER_WEAPON: spawn SHRINKERSPRITE break
		case DEVISTATOR_WEAPON: spawn DEVISTATORSPRITE break
		case TRIPBOMB_WEAPON: spawn TRIPBOMBSPRITE break
		case FREEZE_WEAPON:
			ifvare STATE_RETURN 1
				spawn FLAMETHROWERSPRITE
			else
				spawn FREEZESPRITE
			break
		case GROW_WEAPON: spawn GROWSPRITEICON break
	endswitch
ends

state checkweaponstay
	getactor[THISACTOR].picnum STATE_TEMP1
	getactor[THISACTOR].htpicnum STATE_TEMP2
	ifvarvare STATE_TEMP1 STATE_TEMP2
	ifmultiplayer
	ifvarand gametype_flags 2
	{
		return
	}
ends

// PARAM1 = Weapon
state addweapon_nobreak
	state check_weapon_ownership
	
	getplayer[THISACTOR].gotweapon STATE_PARAM1 STATE_TEMP1
	ifvare STATE_TEMP1 1
	{
		break
	}
	
	setplayer[THISACTOR].gotweapon STATE_PARAM1 1
	getplayer[THISACTOR].weaponswitch STATE_TEMP2
	ifvarand STATE_TEMP2 1
	{
		setplayer[THISACTOR].weapon_pos -9
		setplayer[THISACTOR].curr_weapon STATE_PARAM1
	}
ends

// PARAM1 = Ammo type, PARAM2 = Ammo amount
state addammo_nobreak
	getplayer[THISACTOR].ammo_amount STATE_PARAM1 STATE_TEMP1
	addvarvar STATE_TEMP1 STATE_PARAM2
	
	getplayer[THISACTOR].max_ammo_amount STATE_PARAM1 STATE_TEMP2
	ifvarvarg STATE_TEMP1 STATE_TEMP2
	{
		setplayer[THISACTOR].ammo_amount STATE_PARAM1 STATE_TEMP2
	}
	else
	{
		setplayer[THISACTOR].ammo_amount STATE_PARAM1 STATE_TEMP1
	}
ends
